//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TStatusCode = {
  'OK' : 0,
  'CANCELLED' : 1,
  'ANALYSIS_ERROR' : 2,
  'NOT_IMPLEMENTED_ERROR' : 3,
  'RUNTIME_ERROR' : 4,
  'MEM_LIMIT_EXCEEDED' : 5,
  'INTERNAL_ERROR' : 6,
  'RECOVERABLE_ERROR' : 7
};
TStatus = module.exports.TStatus = function(args) {
  this.status_code = null;
  this.error_msgs = null;
  if (args) {
    if (args.status_code !== undefined && args.status_code !== null) {
      this.status_code = args.status_code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status_code is unset!');
    }
    if (args.error_msgs !== undefined && args.error_msgs !== null) {
      this.error_msgs = Thrift.copyList(args.error_msgs, [null]);
    }
  }
};
TStatus.prototype = {};
TStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.error_msgs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.error_msgs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatus.prototype.write = function(output) {
  output.writeStructBegin('TStatus');
  if (this.status_code !== null && this.status_code !== undefined) {
    output.writeFieldBegin('status_code', Thrift.Type.I32, 1);
    output.writeI32(this.status_code);
    output.writeFieldEnd();
  }
  if (this.error_msgs !== null && this.error_msgs !== undefined) {
    output.writeFieldBegin('error_msgs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.error_msgs.length);
    for (var iter7 in this.error_msgs)
    {
      if (this.error_msgs.hasOwnProperty(iter7))
      {
        iter7 = this.error_msgs[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

