//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ExecStats_ttypes = require('./ExecStats_types')
var Status_ttypes = require('./Status_types')
var Types_ttypes = require('./Types_types')
var beeswax_ttypes = require('./beeswax_types')
var TCLIService_ttypes = require('./TCLIService_types')


var ttypes = module.exports = {};
ttypes.TImpalaQueryOptions = {
  'ABORT_ON_ERROR' : 0,
  'MAX_ERRORS' : 1,
  'DISABLE_CODEGEN' : 2,
  'BATCH_SIZE' : 3,
  'MEM_LIMIT' : 4,
  'NUM_NODES' : 5,
  'MAX_SCAN_RANGE_LENGTH' : 6,
  'MAX_IO_BUFFERS' : 7,
  'NUM_SCANNER_THREADS' : 8,
  'ALLOW_UNSUPPORTED_FORMATS' : 9,
  'DEFAULT_ORDER_BY_LIMIT' : 10,
  'DEBUG_ACTION' : 11,
  'ABORT_ON_DEFAULT_LIMIT_EXCEEDED' : 12,
  'COMPRESSION_CODEC' : 13,
  'SEQ_COMPRESSION_MODE' : 14,
  'HBASE_CACHING' : 15,
  'HBASE_CACHE_BLOCKS' : 16,
  'PARQUET_FILE_SIZE' : 17,
  'EXPLAIN_LEVEL' : 18,
  'SYNC_DDL' : 19,
  'REQUEST_POOL' : 20,
  'V_CPU_CORES' : 21,
  'RESERVATION_REQUEST_TIMEOUT' : 22,
  'DISABLE_CACHED_READS' : 23,
  'DISABLE_OUTERMOST_TOPN' : 24,
  'RM_INITIAL_MEM' : 25,
  'QUERY_TIMEOUT_S' : 26,
  'MAX_BLOCK_MGR_MEMORY' : 27,
  'APPX_COUNT_DISTINCT' : 28,
  'DISABLE_UNSAFE_SPILLS' : 29,
  'EXEC_SINGLE_NODE_ROWS_THRESHOLD' : 30
};
TInsertResult = module.exports.TInsertResult = function(args) {
  this.rows_appended = null;
  if (args) {
    if (args.rows_appended !== undefined && args.rows_appended !== null) {
      this.rows_appended = Thrift.copyMap(args.rows_appended, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows_appended is unset!');
    }
  }
};
TInsertResult.prototype = {};
TInsertResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.rows_appended = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readI64();
          this.rows_appended[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TInsertResult.prototype.write = function(output) {
  output.writeStructBegin('TInsertResult');
  if (this.rows_appended !== null && this.rows_appended !== undefined) {
    output.writeFieldBegin('rows_appended', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.rows_appended));
    for (var kiter8 in this.rows_appended)
    {
      if (this.rows_appended.hasOwnProperty(kiter8))
      {
        var viter9 = this.rows_appended[kiter8];
        output.writeString(kiter8);
        output.writeI64(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPingImpalaServiceResp = module.exports.TPingImpalaServiceResp = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
TPingImpalaServiceResp.prototype = {};
TPingImpalaServiceResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPingImpalaServiceResp.prototype.write = function(output) {
  output.writeStructBegin('TPingImpalaServiceResp');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResetTableReq = module.exports.TResetTableReq = function(args) {
  this.db_name = null;
  this.table_name = null;
  if (args) {
    if (args.db_name !== undefined && args.db_name !== null) {
      this.db_name = args.db_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field db_name is unset!');
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table_name is unset!');
    }
  }
};
TResetTableReq.prototype = {};
TResetTableReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.db_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResetTableReq.prototype.write = function(output) {
  output.writeStructBegin('TResetTableReq');
  if (this.db_name !== null && this.db_name !== undefined) {
    output.writeFieldBegin('db_name', Thrift.Type.STRING, 1);
    output.writeString(this.db_name);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetExecSummaryReq = module.exports.TGetExecSummaryReq = function(args) {
  this.operationHandle = null;
  this.sessionHandle = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new TCLIService_ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new TCLIService_ttypes.TSessionHandle(args.sessionHandle);
    }
  }
};
TGetExecSummaryReq.prototype = {};
TGetExecSummaryReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new TCLIService_ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new TCLIService_ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetExecSummaryReq.prototype.write = function(output) {
  output.writeStructBegin('TGetExecSummaryReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 2);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetExecSummaryResp = module.exports.TGetExecSummaryResp = function(args) {
  this.status = null;
  this.summary = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new TCLIService_ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = new ExecStats_ttypes.TExecSummary(args.summary);
    }
  }
};
TGetExecSummaryResp.prototype = {};
TGetExecSummaryResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new TCLIService_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.summary = new ExecStats_ttypes.TExecSummary();
        this.summary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetExecSummaryResp.prototype.write = function(output) {
  output.writeStructBegin('TGetExecSummaryResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.STRUCT, 2);
    this.summary.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetRuntimeProfileReq = module.exports.TGetRuntimeProfileReq = function(args) {
  this.operationHandle = null;
  this.sessionHandle = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new TCLIService_ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new TCLIService_ttypes.TSessionHandle(args.sessionHandle);
    }
  }
};
TGetRuntimeProfileReq.prototype = {};
TGetRuntimeProfileReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new TCLIService_ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new TCLIService_ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetRuntimeProfileReq.prototype.write = function(output) {
  output.writeStructBegin('TGetRuntimeProfileReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 2);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetRuntimeProfileResp = module.exports.TGetRuntimeProfileResp = function(args) {
  this.status = null;
  this.profile = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new TCLIService_ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = args.profile;
    }
  }
};
TGetRuntimeProfileResp.prototype = {};
TGetRuntimeProfileResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new TCLIService_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.profile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetRuntimeProfileResp.prototype.write = function(output) {
  output.writeStructBegin('TGetRuntimeProfileResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRING, 2);
    output.writeString(this.profile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

