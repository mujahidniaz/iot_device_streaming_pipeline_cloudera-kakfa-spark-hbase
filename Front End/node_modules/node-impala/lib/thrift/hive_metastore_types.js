//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var fb303_ttypes = require('./fb303_types')


var ttypes = module.exports = {};
ttypes.HiveObjectType = {
  'GLOBAL' : 1,
  'DATABASE' : 2,
  'TABLE' : 3,
  'PARTITION' : 4,
  'COLUMN' : 5
};
ttypes.PrincipalType = {
  'USER' : 1,
  'ROLE' : 2,
  'GROUP' : 3
};
Version = module.exports.Version = function(args) {
  this.version = null;
  this.comments = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = args.comments;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 2);
    output.writeString(this.comments);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FieldSchema = module.exports.FieldSchema = function(args) {
  this.name = null;
  this.type = null;
  this.comment = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
FieldSchema.prototype = {};
FieldSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FieldSchema.prototype.write = function(output) {
  output.writeStructBegin('FieldSchema');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Type = module.exports.Type = function(args) {
  this.name = null;
  this.type1 = null;
  this.type2 = null;
  this.fields = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type1 !== undefined && args.type1 !== null) {
      this.type1 = args.type1;
    }
    if (args.type2 !== undefined && args.type2 !== null) {
      this.type2 = args.type2;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyList(args.fields, [ttypes.FieldSchema]);
    }
  }
};
Type.prototype = {};
Type.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.fields = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FieldSchema();
          elem6.read(input);
          this.fields.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.prototype.write = function(output) {
  output.writeStructBegin('Type');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type1 !== null && this.type1 !== undefined) {
    output.writeFieldBegin('type1', Thrift.Type.STRING, 2);
    output.writeString(this.type1);
    output.writeFieldEnd();
  }
  if (this.type2 !== null && this.type2 !== undefined) {
    output.writeFieldBegin('type2', Thrift.Type.STRING, 3);
    output.writeString(this.type2);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter7 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter7))
      {
        iter7 = this.fields[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HiveObjectRef = module.exports.HiveObjectRef = function(args) {
  this.objectType = null;
  this.dbName = null;
  this.objectName = null;
  this.partValues = null;
  this.columnName = null;
  if (args) {
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.objectName !== undefined && args.objectName !== null) {
      this.objectName = args.objectName;
    }
    if (args.partValues !== undefined && args.partValues !== null) {
      this.partValues = Thrift.copyList(args.partValues, [null]);
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
  }
};
HiveObjectRef.prototype = {};
HiveObjectRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.objectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.partValues = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.partValues.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectRef.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectRef');
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.I32, 1);
    output.writeI32(this.objectType);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.objectName !== null && this.objectName !== undefined) {
    output.writeFieldBegin('objectName', Thrift.Type.STRING, 3);
    output.writeString(this.objectName);
    output.writeFieldEnd();
  }
  if (this.partValues !== null && this.partValues !== undefined) {
    output.writeFieldBegin('partValues', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.partValues.length);
    for (var iter15 in this.partValues)
    {
      if (this.partValues.hasOwnProperty(iter15))
      {
        iter15 = this.partValues[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrivilegeGrantInfo = module.exports.PrivilegeGrantInfo = function(args) {
  this.privilege = null;
  this.createTime = null;
  this.grantor = null;
  this.grantorType = null;
  this.grantOption = null;
  if (args) {
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.grantor !== undefined && args.grantor !== null) {
      this.grantor = args.grantor;
    }
    if (args.grantorType !== undefined && args.grantorType !== null) {
      this.grantorType = args.grantorType;
    }
    if (args.grantOption !== undefined && args.grantOption !== null) {
      this.grantOption = args.grantOption;
    }
  }
};
PrivilegeGrantInfo.prototype = {};
PrivilegeGrantInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.privilege = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grantor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.grantorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.grantOption = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeGrantInfo.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeGrantInfo');
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.STRING, 1);
    output.writeString(this.privilege);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.grantor !== null && this.grantor !== undefined) {
    output.writeFieldBegin('grantor', Thrift.Type.STRING, 3);
    output.writeString(this.grantor);
    output.writeFieldEnd();
  }
  if (this.grantorType !== null && this.grantorType !== undefined) {
    output.writeFieldBegin('grantorType', Thrift.Type.I32, 4);
    output.writeI32(this.grantorType);
    output.writeFieldEnd();
  }
  if (this.grantOption !== null && this.grantOption !== undefined) {
    output.writeFieldBegin('grantOption', Thrift.Type.BOOL, 5);
    output.writeBool(this.grantOption);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HiveObjectPrivilege = module.exports.HiveObjectPrivilege = function(args) {
  this.hiveObject = null;
  this.principalName = null;
  this.principalType = null;
  this.grantInfo = null;
  if (args) {
    if (args.hiveObject !== undefined && args.hiveObject !== null) {
      this.hiveObject = new ttypes.HiveObjectRef(args.hiveObject);
    }
    if (args.principalName !== undefined && args.principalName !== null) {
      this.principalName = args.principalName;
    }
    if (args.principalType !== undefined && args.principalType !== null) {
      this.principalType = args.principalType;
    }
    if (args.grantInfo !== undefined && args.grantInfo !== null) {
      this.grantInfo = new ttypes.PrivilegeGrantInfo(args.grantInfo);
    }
  }
};
HiveObjectPrivilege.prototype = {};
HiveObjectPrivilege.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hiveObject = new ttypes.HiveObjectRef();
        this.hiveObject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.principalType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.grantInfo = new ttypes.PrivilegeGrantInfo();
        this.grantInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HiveObjectPrivilege.prototype.write = function(output) {
  output.writeStructBegin('HiveObjectPrivilege');
  if (this.hiveObject !== null && this.hiveObject !== undefined) {
    output.writeFieldBegin('hiveObject', Thrift.Type.STRUCT, 1);
    this.hiveObject.write(output);
    output.writeFieldEnd();
  }
  if (this.principalName !== null && this.principalName !== undefined) {
    output.writeFieldBegin('principalName', Thrift.Type.STRING, 2);
    output.writeString(this.principalName);
    output.writeFieldEnd();
  }
  if (this.principalType !== null && this.principalType !== undefined) {
    output.writeFieldBegin('principalType', Thrift.Type.I32, 3);
    output.writeI32(this.principalType);
    output.writeFieldEnd();
  }
  if (this.grantInfo !== null && this.grantInfo !== undefined) {
    output.writeFieldBegin('grantInfo', Thrift.Type.STRUCT, 4);
    this.grantInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrivilegeBag = module.exports.PrivilegeBag = function(args) {
  this.privileges = null;
  if (args) {
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = Thrift.copyList(args.privileges, [ttypes.HiveObjectPrivilege]);
    }
  }
};
PrivilegeBag.prototype = {};
PrivilegeBag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.privileges = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.HiveObjectPrivilege();
          elem22.read(input);
          this.privileges.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivilegeBag.prototype.write = function(output) {
  output.writeStructBegin('PrivilegeBag');
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.privileges.length);
    for (var iter23 in this.privileges)
    {
      if (this.privileges.hasOwnProperty(iter23))
      {
        iter23 = this.privileges[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PrincipalPrivilegeSet = module.exports.PrincipalPrivilegeSet = function(args) {
  this.userPrivileges = null;
  this.groupPrivileges = null;
  this.rolePrivileges = null;
  if (args) {
    if (args.userPrivileges !== undefined && args.userPrivileges !== null) {
      this.userPrivileges = Thrift.copyMap(args.userPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.groupPrivileges !== undefined && args.groupPrivileges !== null) {
      this.groupPrivileges = Thrift.copyMap(args.groupPrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
    if (args.rolePrivileges !== undefined && args.rolePrivileges !== null) {
      this.rolePrivileges = Thrift.copyMap(args.rolePrivileges, [Thrift.copyList, ttypes.PrivilegeGrantInfo]);
    }
  }
};
PrincipalPrivilegeSet.prototype = {};
PrincipalPrivilegeSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size24 = 0;
        var _rtmp328;
        this.userPrivileges = {};
        var _ktype25 = 0;
        var _vtype26 = 0;
        _rtmp328 = input.readMapBegin();
        _ktype25 = _rtmp328.ktype;
        _vtype26 = _rtmp328.vtype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var key30 = null;
          var val31 = null;
          key30 = input.readString();
          var _size32 = 0;
          var _rtmp336;
          val31 = [];
          var _etype35 = 0;
          _rtmp336 = input.readListBegin();
          _etype35 = _rtmp336.etype;
          _size32 = _rtmp336.size;
          for (var _i37 = 0; _i37 < _size32; ++_i37)
          {
            var elem38 = null;
            elem38 = new ttypes.PrivilegeGrantInfo();
            elem38.read(input);
            val31.push(elem38);
          }
          input.readListEnd();
          this.userPrivileges[key30] = val31;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size39 = 0;
        var _rtmp343;
        this.groupPrivileges = {};
        var _ktype40 = 0;
        var _vtype41 = 0;
        _rtmp343 = input.readMapBegin();
        _ktype40 = _rtmp343.ktype;
        _vtype41 = _rtmp343.vtype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var key45 = null;
          var val46 = null;
          key45 = input.readString();
          var _size47 = 0;
          var _rtmp351;
          val46 = [];
          var _etype50 = 0;
          _rtmp351 = input.readListBegin();
          _etype50 = _rtmp351.etype;
          _size47 = _rtmp351.size;
          for (var _i52 = 0; _i52 < _size47; ++_i52)
          {
            var elem53 = null;
            elem53 = new ttypes.PrivilegeGrantInfo();
            elem53.read(input);
            val46.push(elem53);
          }
          input.readListEnd();
          this.groupPrivileges[key45] = val46;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.rolePrivileges = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          var _size62 = 0;
          var _rtmp366;
          val61 = [];
          var _etype65 = 0;
          _rtmp366 = input.readListBegin();
          _etype65 = _rtmp366.etype;
          _size62 = _rtmp366.size;
          for (var _i67 = 0; _i67 < _size62; ++_i67)
          {
            var elem68 = null;
            elem68 = new ttypes.PrivilegeGrantInfo();
            elem68.read(input);
            val61.push(elem68);
          }
          input.readListEnd();
          this.rolePrivileges[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrincipalPrivilegeSet.prototype.write = function(output) {
  output.writeStructBegin('PrincipalPrivilegeSet');
  if (this.userPrivileges !== null && this.userPrivileges !== undefined) {
    output.writeFieldBegin('userPrivileges', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.userPrivileges));
    for (var kiter69 in this.userPrivileges)
    {
      if (this.userPrivileges.hasOwnProperty(kiter69))
      {
        var viter70 = this.userPrivileges[kiter69];
        output.writeString(kiter69);
        output.writeListBegin(Thrift.Type.STRUCT, viter70.length);
        for (var iter71 in viter70)
        {
          if (viter70.hasOwnProperty(iter71))
          {
            iter71 = viter70[iter71];
            iter71.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.groupPrivileges !== null && this.groupPrivileges !== undefined) {
    output.writeFieldBegin('groupPrivileges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.groupPrivileges));
    for (var kiter72 in this.groupPrivileges)
    {
      if (this.groupPrivileges.hasOwnProperty(kiter72))
      {
        var viter73 = this.groupPrivileges[kiter72];
        output.writeString(kiter72);
        output.writeListBegin(Thrift.Type.STRUCT, viter73.length);
        for (var iter74 in viter73)
        {
          if (viter73.hasOwnProperty(iter74))
          {
            iter74 = viter73[iter74];
            iter74.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rolePrivileges !== null && this.rolePrivileges !== undefined) {
    output.writeFieldBegin('rolePrivileges', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.rolePrivileges));
    for (var kiter75 in this.rolePrivileges)
    {
      if (this.rolePrivileges.hasOwnProperty(kiter75))
      {
        var viter76 = this.rolePrivileges[kiter75];
        output.writeString(kiter75);
        output.writeListBegin(Thrift.Type.STRUCT, viter76.length);
        for (var iter77 in viter76)
        {
          if (viter76.hasOwnProperty(iter77))
          {
            iter77 = viter76[iter77];
            iter77.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Role = module.exports.Role = function(args) {
  this.roleName = null;
  this.createTime = null;
  this.ownerName = null;
  if (args) {
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.ownerName !== undefined && args.ownerName !== null) {
      this.ownerName = args.ownerName;
    }
  }
};
Role.prototype = {};
Role.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ownerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Role.prototype.write = function(output) {
  output.writeStructBegin('Role');
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 1);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 2);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.ownerName !== null && this.ownerName !== undefined) {
    output.writeFieldBegin('ownerName', Thrift.Type.STRING, 3);
    output.writeString(this.ownerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Database = module.exports.Database = function(args) {
  this.name = null;
  this.description = null;
  this.locationUri = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.locationUri !== undefined && args.locationUri !== null) {
      this.locationUri = args.locationUri;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Database.prototype = {};
Database.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locationUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size78 = 0;
        var _rtmp382;
        this.parameters = {};
        var _ktype79 = 0;
        var _vtype80 = 0;
        _rtmp382 = input.readMapBegin();
        _ktype79 = _rtmp382.ktype;
        _vtype80 = _rtmp382.vtype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var key84 = null;
          var val85 = null;
          key84 = input.readString();
          val85 = input.readString();
          this.parameters[key84] = val85;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Database.prototype.write = function(output) {
  output.writeStructBegin('Database');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.locationUri !== null && this.locationUri !== undefined) {
    output.writeFieldBegin('locationUri', Thrift.Type.STRING, 3);
    output.writeString(this.locationUri);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter86 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter86))
      {
        var viter87 = this.parameters[kiter86];
        output.writeString(kiter86);
        output.writeString(viter87);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 5);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SerDeInfo = module.exports.SerDeInfo = function(args) {
  this.name = null;
  this.serializationLib = null;
  this.parameters = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.serializationLib !== undefined && args.serializationLib !== null) {
      this.serializationLib = args.serializationLib;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
  }
};
SerDeInfo.prototype = {};
SerDeInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serializationLib = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.parameters = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var key94 = null;
          var val95 = null;
          key94 = input.readString();
          val95 = input.readString();
          this.parameters[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SerDeInfo.prototype.write = function(output) {
  output.writeStructBegin('SerDeInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serializationLib !== null && this.serializationLib !== undefined) {
    output.writeFieldBegin('serializationLib', Thrift.Type.STRING, 2);
    output.writeString(this.serializationLib);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter96 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter96))
      {
        var viter97 = this.parameters[kiter96];
        output.writeString(kiter96);
        output.writeString(viter97);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Order = module.exports.Order = function(args) {
  this.col = null;
  this.order = null;
  if (args) {
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.col = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.STRING, 1);
    output.writeString(this.col);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StorageDescriptor = module.exports.StorageDescriptor = function(args) {
  this.cols = null;
  this.location = null;
  this.inputFormat = null;
  this.outputFormat = null;
  this.compressed = null;
  this.numBuckets = null;
  this.serdeInfo = null;
  this.bucketCols = null;
  this.sortCols = null;
  this.parameters = null;
  if (args) {
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [ttypes.FieldSchema]);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.inputFormat !== undefined && args.inputFormat !== null) {
      this.inputFormat = args.inputFormat;
    }
    if (args.outputFormat !== undefined && args.outputFormat !== null) {
      this.outputFormat = args.outputFormat;
    }
    if (args.compressed !== undefined && args.compressed !== null) {
      this.compressed = args.compressed;
    }
    if (args.numBuckets !== undefined && args.numBuckets !== null) {
      this.numBuckets = args.numBuckets;
    }
    if (args.serdeInfo !== undefined && args.serdeInfo !== null) {
      this.serdeInfo = new ttypes.SerDeInfo(args.serdeInfo);
    }
    if (args.bucketCols !== undefined && args.bucketCols !== null) {
      this.bucketCols = Thrift.copyList(args.bucketCols, [null]);
    }
    if (args.sortCols !== undefined && args.sortCols !== null) {
      this.sortCols = Thrift.copyList(args.sortCols, [ttypes.Order]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
  }
};
StorageDescriptor.prototype = {};
StorageDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.cols = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new ttypes.FieldSchema();
          elem104.read(input);
          this.cols.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputFormat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numBuckets = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.serdeInfo = new ttypes.SerDeInfo();
        this.serdeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.bucketCols = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          elem111 = input.readString();
          this.bucketCols.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.sortCols = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Order();
          elem118.read(input);
          this.sortCols.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size119 = 0;
        var _rtmp3123;
        this.parameters = {};
        var _ktype120 = 0;
        var _vtype121 = 0;
        _rtmp3123 = input.readMapBegin();
        _ktype120 = _rtmp3123.ktype;
        _vtype121 = _rtmp3123.vtype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var key125 = null;
          var val126 = null;
          key125 = input.readString();
          val126 = input.readString();
          this.parameters[key125] = val126;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StorageDescriptor.prototype.write = function(output) {
  output.writeStructBegin('StorageDescriptor');
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cols.length);
    for (var iter127 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter127))
      {
        iter127 = this.cols[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.inputFormat !== null && this.inputFormat !== undefined) {
    output.writeFieldBegin('inputFormat', Thrift.Type.STRING, 3);
    output.writeString(this.inputFormat);
    output.writeFieldEnd();
  }
  if (this.outputFormat !== null && this.outputFormat !== undefined) {
    output.writeFieldBegin('outputFormat', Thrift.Type.STRING, 4);
    output.writeString(this.outputFormat);
    output.writeFieldEnd();
  }
  if (this.compressed !== null && this.compressed !== undefined) {
    output.writeFieldBegin('compressed', Thrift.Type.BOOL, 5);
    output.writeBool(this.compressed);
    output.writeFieldEnd();
  }
  if (this.numBuckets !== null && this.numBuckets !== undefined) {
    output.writeFieldBegin('numBuckets', Thrift.Type.I32, 6);
    output.writeI32(this.numBuckets);
    output.writeFieldEnd();
  }
  if (this.serdeInfo !== null && this.serdeInfo !== undefined) {
    output.writeFieldBegin('serdeInfo', Thrift.Type.STRUCT, 7);
    this.serdeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.bucketCols !== null && this.bucketCols !== undefined) {
    output.writeFieldBegin('bucketCols', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.bucketCols.length);
    for (var iter128 in this.bucketCols)
    {
      if (this.bucketCols.hasOwnProperty(iter128))
      {
        iter128 = this.bucketCols[iter128];
        output.writeString(iter128);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sortCols !== null && this.sortCols !== undefined) {
    output.writeFieldBegin('sortCols', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortCols.length);
    for (var iter129 in this.sortCols)
    {
      if (this.sortCols.hasOwnProperty(iter129))
      {
        iter129 = this.sortCols[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter130 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter130))
      {
        var viter131 = this.parameters[kiter130];
        output.writeString(kiter130);
        output.writeString(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Table = module.exports.Table = function(args) {
  this.tableName = null;
  this.dbName = null;
  this.owner = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.retention = null;
  this.sd = null;
  this.partitionKeys = null;
  this.parameters = null;
  this.viewOriginalText = null;
  this.viewExpandedText = null;
  this.tableType = null;
  this.privileges = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.retention !== undefined && args.retention !== null) {
      this.retention = args.retention;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.partitionKeys !== undefined && args.partitionKeys !== null) {
      this.partitionKeys = Thrift.copyList(args.partitionKeys, [ttypes.FieldSchema]);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.viewOriginalText !== undefined && args.viewOriginalText !== null) {
      this.viewOriginalText = args.viewOriginalText;
    }
    if (args.viewExpandedText !== undefined && args.viewExpandedText !== null) {
      this.viewExpandedText = args.viewExpandedText;
    }
    if (args.tableType !== undefined && args.tableType !== null) {
      this.tableType = args.tableType;
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.retention = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.partitionKeys = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.FieldSchema();
          elem138.read(input);
          this.partitionKeys.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size139 = 0;
        var _rtmp3143;
        this.parameters = {};
        var _ktype140 = 0;
        var _vtype141 = 0;
        _rtmp3143 = input.readMapBegin();
        _ktype140 = _rtmp3143.ktype;
        _vtype141 = _rtmp3143.vtype;
        _size139 = _rtmp3143.size;
        for (var _i144 = 0; _i144 < _size139; ++_i144)
        {
          var key145 = null;
          var val146 = null;
          key145 = input.readString();
          val146 = input.readString();
          this.parameters[key145] = val146;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.viewOriginalText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.viewExpandedText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.tableType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 3);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.retention !== null && this.retention !== undefined) {
    output.writeFieldBegin('retention', Thrift.Type.I32, 6);
    output.writeI32(this.retention);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 7);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.partitionKeys !== null && this.partitionKeys !== undefined) {
    output.writeFieldBegin('partitionKeys', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitionKeys.length);
    for (var iter147 in this.partitionKeys)
    {
      if (this.partitionKeys.hasOwnProperty(iter147))
      {
        iter147 = this.partitionKeys[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter148 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter148))
      {
        var viter149 = this.parameters[kiter148];
        output.writeString(kiter148);
        output.writeString(viter149);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.viewOriginalText !== null && this.viewOriginalText !== undefined) {
    output.writeFieldBegin('viewOriginalText', Thrift.Type.STRING, 10);
    output.writeString(this.viewOriginalText);
    output.writeFieldEnd();
  }
  if (this.viewExpandedText !== null && this.viewExpandedText !== undefined) {
    output.writeFieldBegin('viewExpandedText', Thrift.Type.STRING, 11);
    output.writeString(this.viewExpandedText);
    output.writeFieldEnd();
  }
  if (this.tableType !== null && this.tableType !== undefined) {
    output.writeFieldBegin('tableType', Thrift.Type.STRING, 12);
    output.writeString(this.tableType);
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 13);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Partition = module.exports.Partition = function(args) {
  this.values = null;
  this.dbName = null;
  this.tableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.sd = null;
  this.parameters = null;
  this.privileges = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.privileges !== undefined && args.privileges !== null) {
      this.privileges = new ttypes.PrincipalPrivilegeSet(args.privileges);
    }
  }
};
Partition.prototype = {};
Partition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size150 = 0;
        var _rtmp3154;
        this.values = [];
        var _etype153 = 0;
        _rtmp3154 = input.readListBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = input.readString();
          this.values.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size157 = 0;
        var _rtmp3161;
        this.parameters = {};
        var _ktype158 = 0;
        var _vtype159 = 0;
        _rtmp3161 = input.readMapBegin();
        _ktype158 = _rtmp3161.ktype;
        _vtype159 = _rtmp3161.vtype;
        _size157 = _rtmp3161.size;
        for (var _i162 = 0; _i162 < _size157; ++_i162)
        {
          var key163 = null;
          var val164 = null;
          key163 = input.readString();
          val164 = input.readString();
          this.parameters[key163] = val164;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.privileges = new ttypes.PrincipalPrivilegeSet();
        this.privileges.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Partition.prototype.write = function(output) {
  output.writeStructBegin('Partition');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter165 in this.values)
    {
      if (this.values.hasOwnProperty(iter165))
      {
        iter165 = this.values[iter165];
        output.writeString(iter165);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 2);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 3);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 4);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 5);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 6);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter166 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter166))
      {
        var viter167 = this.parameters[kiter166];
        output.writeString(kiter166);
        output.writeString(viter167);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.privileges !== null && this.privileges !== undefined) {
    output.writeFieldBegin('privileges', Thrift.Type.STRUCT, 8);
    this.privileges.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Index = module.exports.Index = function(args) {
  this.indexName = null;
  this.indexHandlerClass = null;
  this.dbName = null;
  this.origTableName = null;
  this.createTime = null;
  this.lastAccessTime = null;
  this.indexTableName = null;
  this.sd = null;
  this.parameters = null;
  this.deferredRebuild = null;
  if (args) {
    if (args.indexName !== undefined && args.indexName !== null) {
      this.indexName = args.indexName;
    }
    if (args.indexHandlerClass !== undefined && args.indexHandlerClass !== null) {
      this.indexHandlerClass = args.indexHandlerClass;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
    if (args.origTableName !== undefined && args.origTableName !== null) {
      this.origTableName = args.origTableName;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.lastAccessTime !== undefined && args.lastAccessTime !== null) {
      this.lastAccessTime = args.lastAccessTime;
    }
    if (args.indexTableName !== undefined && args.indexTableName !== null) {
      this.indexTableName = args.indexTableName;
    }
    if (args.sd !== undefined && args.sd !== null) {
      this.sd = new ttypes.StorageDescriptor(args.sd);
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.deferredRebuild !== undefined && args.deferredRebuild !== null) {
      this.deferredRebuild = args.deferredRebuild;
    }
  }
};
Index.prototype = {};
Index.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexHandlerClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.origTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.lastAccessTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.indexTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sd = new ttypes.StorageDescriptor();
        this.sd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size168 = 0;
        var _rtmp3172;
        this.parameters = {};
        var _ktype169 = 0;
        var _vtype170 = 0;
        _rtmp3172 = input.readMapBegin();
        _ktype169 = _rtmp3172.ktype;
        _vtype170 = _rtmp3172.vtype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var key174 = null;
          var val175 = null;
          key174 = input.readString();
          val175 = input.readString();
          this.parameters[key174] = val175;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.deferredRebuild = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Index.prototype.write = function(output) {
  output.writeStructBegin('Index');
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 1);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.indexHandlerClass !== null && this.indexHandlerClass !== undefined) {
    output.writeFieldBegin('indexHandlerClass', Thrift.Type.STRING, 2);
    output.writeString(this.indexHandlerClass);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 3);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  if (this.origTableName !== null && this.origTableName !== undefined) {
    output.writeFieldBegin('origTableName', Thrift.Type.STRING, 4);
    output.writeString(this.origTableName);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 5);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastAccessTime !== null && this.lastAccessTime !== undefined) {
    output.writeFieldBegin('lastAccessTime', Thrift.Type.I32, 6);
    output.writeI32(this.lastAccessTime);
    output.writeFieldEnd();
  }
  if (this.indexTableName !== null && this.indexTableName !== undefined) {
    output.writeFieldBegin('indexTableName', Thrift.Type.STRING, 7);
    output.writeString(this.indexTableName);
    output.writeFieldEnd();
  }
  if (this.sd !== null && this.sd !== undefined) {
    output.writeFieldBegin('sd', Thrift.Type.STRUCT, 8);
    this.sd.write(output);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter176 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter176))
      {
        var viter177 = this.parameters[kiter176];
        output.writeString(kiter176);
        output.writeString(viter177);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deferredRebuild !== null && this.deferredRebuild !== undefined) {
    output.writeFieldBegin('deferredRebuild', Thrift.Type.BOOL, 10);
    output.writeBool(this.deferredRebuild);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Schema = module.exports.Schema = function(args) {
  this.fieldSchemas = null;
  this.properties = null;
  if (args) {
    if (args.fieldSchemas !== undefined && args.fieldSchemas !== null) {
      this.fieldSchemas = Thrift.copyList(args.fieldSchemas, [ttypes.FieldSchema]);
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.fieldSchemas = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = new ttypes.FieldSchema();
          elem184.read(input);
          this.fieldSchemas.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size185 = 0;
        var _rtmp3189;
        this.properties = {};
        var _ktype186 = 0;
        var _vtype187 = 0;
        _rtmp3189 = input.readMapBegin();
        _ktype186 = _rtmp3189.ktype;
        _vtype187 = _rtmp3189.vtype;
        _size185 = _rtmp3189.size;
        for (var _i190 = 0; _i190 < _size185; ++_i190)
        {
          var key191 = null;
          var val192 = null;
          key191 = input.readString();
          val192 = input.readString();
          this.properties[key191] = val192;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.fieldSchemas !== null && this.fieldSchemas !== undefined) {
    output.writeFieldBegin('fieldSchemas', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fieldSchemas.length);
    for (var iter193 in this.fieldSchemas)
    {
      if (this.fieldSchemas.hasOwnProperty(iter193))
      {
        iter193 = this.fieldSchemas[iter193];
        iter193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter194 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter194))
      {
        var viter195 = this.properties[kiter194];
        output.writeString(kiter194);
        output.writeString(viter195);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaException = module.exports.MetaException = function(args) {
  Thrift.TException.call(this, "MetaException")
  this.name = "MetaException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetaException, Thrift.TException);
MetaException.prototype.name = 'MetaException';
MetaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaException.prototype.write = function(output) {
  output.writeStructBegin('MetaException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownTableException = module.exports.UnknownTableException = function(args) {
  Thrift.TException.call(this, "UnknownTableException")
  this.name = "UnknownTableException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownTableException, Thrift.TException);
UnknownTableException.prototype.name = 'UnknownTableException';
UnknownTableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownTableException.prototype.write = function(output) {
  output.writeStructBegin('UnknownTableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnknownDBException = module.exports.UnknownDBException = function(args) {
  Thrift.TException.call(this, "UnknownDBException")
  this.name = "UnknownDBException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnknownDBException, Thrift.TException);
UnknownDBException.prototype.name = 'UnknownDBException';
UnknownDBException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownDBException.prototype.write = function(output) {
  output.writeStructBegin('UnknownDBException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AlreadyExistsException = module.exports.AlreadyExistsException = function(args) {
  Thrift.TException.call(this, "AlreadyExistsException")
  this.name = "AlreadyExistsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AlreadyExistsException, Thrift.TException);
AlreadyExistsException.prototype.name = 'AlreadyExistsException';
AlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('AlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidObjectException = module.exports.InvalidObjectException = function(args) {
  Thrift.TException.call(this, "InvalidObjectException")
  this.name = "InvalidObjectException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidObjectException, Thrift.TException);
InvalidObjectException.prototype.name = 'InvalidObjectException';
InvalidObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidObjectException.prototype.write = function(output) {
  output.writeStructBegin('InvalidObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchObjectException = module.exports.NoSuchObjectException = function(args) {
  Thrift.TException.call(this, "NoSuchObjectException")
  this.name = "NoSuchObjectException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchObjectException, Thrift.TException);
NoSuchObjectException.prototype.name = 'NoSuchObjectException';
NoSuchObjectException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchObjectException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchObjectException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexAlreadyExistsException = module.exports.IndexAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "IndexAlreadyExistsException")
  this.name = "IndexAlreadyExistsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IndexAlreadyExistsException, Thrift.TException);
IndexAlreadyExistsException.prototype.name = 'IndexAlreadyExistsException';
IndexAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('IndexAlreadyExistsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidOperationException = module.exports.InvalidOperationException = function(args) {
  Thrift.TException.call(this, "InvalidOperationException")
  this.name = "InvalidOperationException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidOperationException, Thrift.TException);
InvalidOperationException.prototype.name = 'InvalidOperationException';
InvalidOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperationException.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigValSecurityException = module.exports.ConfigValSecurityException = function(args) {
  Thrift.TException.call(this, "ConfigValSecurityException")
  this.name = "ConfigValSecurityException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ConfigValSecurityException, Thrift.TException);
ConfigValSecurityException.prototype.name = 'ConfigValSecurityException';
ConfigValSecurityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigValSecurityException.prototype.write = function(output) {
  output.writeStructBegin('ConfigValSecurityException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DDL_TIME = 'transient_lastDdlTime';
ttypes.IS_ARCHIVED = 'is_archived';
ttypes.ORIGINAL_LOCATION = 'original_location';
ttypes.META_TABLE_COLUMNS = 'columns';
ttypes.META_TABLE_COLUMN_TYPES = 'columns.types';
ttypes.BUCKET_FIELD_NAME = 'bucket_field_name';
ttypes.BUCKET_COUNT = 'bucket_count';
ttypes.FIELD_TO_DIMENSION = 'field_to_dimension';
ttypes.META_TABLE_NAME = 'name';
ttypes.META_TABLE_DB = 'db';
ttypes.META_TABLE_LOCATION = 'location';
ttypes.META_TABLE_SERDE = 'serde';
ttypes.META_TABLE_PARTITION_COLUMNS = 'partition_columns';
ttypes.FILE_INPUT_FORMAT = 'file.inputformat';
ttypes.FILE_OUTPUT_FORMAT = 'file.outputformat';
ttypes.META_TABLE_STORAGE = 'storage_handler';
